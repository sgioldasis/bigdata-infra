version: "3.6"
services:

  # JupyterLab  : Port 8889
  # Hue         : Port 8888 using admin/admin
  # Minio       : Port 9001 using savas/savas123

  # cloudbeaver:
  #   image: dbeaver/cloudbeaver:latest
  #   container_name: cloudbeaver
  #   ports:
  #     - 8978:8978
  #   volumes:
  #     - ./data/cloudbeaver/workspace:/opt/cloudbeaver/workspace
  #   environment:
  #     SERVICE_PRECONDITION: "hive-metastore:9083"
  #   depends_on:
  #     - hive-metastore
  #   restart: always

  jupyterlab:
    image: sgioldasis/docker-spark-cluster:3.2.0
    # build: ./docker-spark-cluster
    container_name: jupyterlab
    ports:
      - 8889:8888
      - 4040:4040
    volumes:
      - ./workspace:/opt/workspace
    environment:
      - JUPYTER_ENABLE_LAB=yes
    command: "jupyter lab --allow-root --ip 0.0.0.0 --port 8888 --NotebookApp.token='' --NotebookApp.password='' --notebook-dir /opt/workspace"      

  spark-master:
    image: sgioldasis/docker-spark-cluster:3.2.0
    # build: ./docker-spark-cluster
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    env_file:
      - ./base/hadoop/hadoop-hive.env
    depends_on:
      - hive-server
    volumes:
      - ./workspace:/opt/workspace
      - ./base/spark_conf/hadoop:/etc/hadoop/conf/
      - ./base/spark_conf/hive/hive-site.xml:/opt/spark/conf/hive-site.xml
    environment:
      - SPARK_LOCAL_IP=spark-master
      - SPARK_WORKLOAD=master

  spark-worker-1:
    image: sgioldasis/docker-spark-cluster:3.2.0
    # build: ./docker-spark-cluster
    container_name: spark-worker-1
    ports:
      - "8181:8080"
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-1
    env_file:
      - ./base/hadoop/hadoop-hive.env
    volumes:
      - ./workspace:/opt/workspace
      - ./base/spark_conf/hadoop:/etc/hadoop/conf/
      - ./base/spark_conf/hive/hive-site.xml:/usr/bin/spark-3.0.0-bin-hadoop3.2/conf/hive-site.xml

  spark-worker-2:
    image: sgioldasis/docker-spark-cluster:3.2.0
    # build: ./docker-spark-cluster
    container_name: spark-worker-2
    ports:
      - "8182:8080"
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
      - SPARK_WORKLOAD=worker
      - SPARK_LOCAL_IP=spark-worker-2
    env_file:
      - ./base/hadoop/hadoop-hive.env
    volumes:
      - ./workspace:/opt/workspace
      - ./base/spark_conf/hadoop:/etc/hadoop/conf/
      - ./base/spark_conf/hive/hive-site.xml:/usr/bin/spark-3.0.0-bin-hadoop3.2/conf/hive-site.xml
  
  # df = spark.read.json('hdfs://namenode:8020/user/admin/orders.json')
  namenode:
    image: fjardim/namenode_sqoop
    container_name: namenode
    hostname: namenode
    volumes:
      - ./base/hdfs/namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./base/hadoop/hadoop-hive.env
    ports:
      - "50070:50070"

  datanode1:
    image: fjardim/datanode
    container_name: datanode1
    hostname: datanode1
    volumes:
      - ./base/hdfs/datanode1:/hadoop/dfs/data
    env_file:
      - ./base/hadoop/hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    depends_on:
      - namenode
    ports:
      - "50075:50075"

  datanode2:
    image: fjardim/datanode
    container_name: datanode2
    hostname: datanode2
    volumes:
      - ./base/hdfs/datanode2:/hadoop/dfs/data
    env_file:
      - ./base/hadoop/hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    depends_on:
      - namenode
    ports:
      - "50080:50075"
  
  hive-server:
    image: fjardim/hive
    container_name: hive-server
    hostname: hive_server
    env_file:
      - ./base/hadoop/hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
    depends_on:
      - hive-metastore
    healthcheck:
      test: netstat -anp | grep 10000 > /dev/null
      timeout: 20s
      retries: 10

  hive-metastore:
    image: fjardim/hive
    container_name: hive_metastore
    hostname: hive_metastore
    env_file:
      - ./base/hadoop/hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:50070 datanode1:50075 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
    depends_on:
      - hive-metastore-postgresql
  
  hive-metastore-postgresql:
    image: fjardim/hive-metastore
    container_name: hive-metastore-postgresql
    hostname: hive_metastore_postgresql
    volumes:
      - ./base/postgresql:/var/lib/postgresql/data
    depends_on:
      - datanode1
      - datanode2

  # Access Hue at localhost:8888 using admin/admin
  hue:
    # To login use admin/admin
    image: gethue/hue:latest
    hostname: hue
    container_name: hue
    ports:
    - "8888:8888"
    volumes:
      # - ./base/hue/hue-overrides.ini:/usr/share/hue/desktop/conf/z-hue.ini
      - ./base/hue/hue-overrides.ini:/usr/share/hue/desktop/conf/hue.ini
    # depends_on:
    #   - "database"
    #   - "hive-server"
    depends_on:
      hive-server:
        condition: service_healthy
  
  database:
    image: fjardim/mysql
    container_name: database
    hostname: database
    ports:
        - "3306:3306"
    command: mysqld --innodb-flush-method=O_DSYNC --innodb-use-native-aio=OFF --init-file /data/application/init.sql
    volumes:
        - ./base/mysql/data:/var/lib/mysql
        - ./base/mysql/init.sql:/data/application/init.sql
    environment:
        MYSQL_ROOT_USER: root
        MYSQL_ROOT_PASSWORD: secret
        MYSQL_DATABASE: hue
        MYSQL_USER: root
        MYSQL_PASSWORD: secret

  minio:
    # Access Minio at localhost:9001 using savas/savas123
    image: minio/minio
    container_name: minio
    volumes:
      - "./data/s3:/s3"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: savas
      MINIO_SECRET_KEY: savas123
    entrypoint: sh
    command: -c 'mkdir -p /s3/bucket-test && minio server /s3  --console-address ":9001"'

  # zookeeper:
  #   image: wurstmeister/zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"

  # kafka:
  #   image: wurstmeister/kafka
  #   container_name: kafka
  #   ports:
  #     - "9092:9092"
  #   depends_on:
  #     - "zookeeper"
  #   environment:
  #     KAFKA_ADVERTISED_HOST_NAME: kafka
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181        

  # kafka_manager:
  #   image: hlebalbau/kafka-manager:stable
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     ZK_HOSTS: "zookeeper:2181"
  #     APPLICATION_SECRET: "savas"

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.0.0
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000

  # broker:
  #   image: confluentinc/cp-server:7.0.0
  #   hostname: broker
  #   container_name: broker
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #     - "9101:9101"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_JMX_PORT: 9101
  #     KAFKA_JMX_HOSTNAME: localhost
  #     KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
  #     CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
  #     CONFLUENT_METRICS_ENABLE: 'true'
  #     CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.0.0
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   depends_on:
  #     - broker
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # connect:
  #   image: cnfldemos/cp-server-connect-datagen:0.5.0-6.2.0
  #   hostname: connect
  #   container_name: connect
  #   depends_on:
  #     - broker
  #     - schema-registry
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONNECT_REST_ADVERTISED_HOST_NAME: connect
  #     CONNECT_REST_PORT: 8083
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     # CLASSPATH required due to CC-2422
  #     CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.0.0.jar
  #     CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
  #     CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
  #     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
  #     CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:7.0.0
  #   hostname: control-center
  #   container_name: control-center
  #   depends_on:
  #     - broker
  #     - schema-registry
  #     - connect
  #     - ksqldb-server
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
  #     CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
  #     CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
  #     CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #     PORT: 9021

  # ksqldb-server:
  #   image: confluentinc/cp-ksqldb-server:7.0.0
  #   hostname: ksqldb-server
  #   container_name: ksqldb-server
  #   depends_on:
  #     - broker
  #     - connect
  #   ports:
  #     - "8088:8088"
  #   environment:
  #     KSQL_CONFIG_DIR: "/etc/ksql"
  #     KSQL_BOOTSTRAP_SERVERS: "broker:29092"
  #     KSQL_HOST_NAME: ksqldb-server
  #     KSQL_LISTENERS: "http://0.0.0.0:8088"
  #     KSQL_CACHE_MAX_BYTES_BUFFERING: 0
  #     KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
  #     KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
  #     KSQL_KSQL_CONNECT_URL: "http://connect:8083"
  #     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
  #     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
  #     KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  # ksqldb-cli:
  #   image: confluentinc/cp-ksqldb-cli:7.0.0
  #   container_name: ksqldb-cli
  #   depends_on:
  #     - broker
  #     - connect
  #     - ksqldb-server
  #   entrypoint: /bin/sh
  #   tty: true

  # ksql-datagen:
  #   image: confluentinc/ksqldb-examples:7.0.0
  #   hostname: ksql-datagen
  #   container_name: ksql-datagen
  #   depends_on:
  #     - ksqldb-server
  #     - broker
  #     - schema-registry
  #     - connect
  #   command: "bash -c 'echo Waiting for Kafka to be ready... && \
  #                      cub kafka-ready -b broker:29092 1 40 && \
  #                      echo Waiting for Confluent Schema Registry to be ready... && \
  #                      cub sr-ready schema-registry 8081 40 && \
  #                      echo Waiting a few seconds for topic creation to finish... && \
  #                      sleep 11 && \
  #                      tail -f /dev/null'"
  #   environment:
  #     KSQL_CONFIG_DIR: "/etc/ksql"
  #     STREAMS_BOOTSTRAP_SERVERS: broker:29092
  #     STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
  #     STREAMS_SCHEMA_REGISTRY_PORT: 8081

  # rest-proxy:
  #   image: confluentinc/cp-kafka-rest:7.0.0
  #   depends_on:
  #     - broker
  #     - schema-registry
  #   ports:
  #     - 8082:8082
  #   hostname: rest-proxy
  #   container_name: rest-proxy
  #   environment:
  #     KAFKA_REST_HOST_NAME: rest-proxy
  #     KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
  #     KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
  #     KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'